"""
Django settings for immobot project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

import sentry_sdk
from dotenv import load_dotenv
from sentry_sdk.integrations.django import DjangoIntegration

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    'SECRET_KEY',
    'k^m1(izadcs*bc1n6%8e_47k9zmazcz%1a9wwn!pjdau6-4+l2'
)

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'database',
    'bot',
    'scraper'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'immobot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'immobot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime} {levelname: <7} {module: <11}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'null': {
            'class': 'logging.NullHandler',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'django.server': {
            'handlers': ['null'],
            'level': 'INFO',
            'propagate': False
        }
    }
}

STATIC_ROOT = os.getenv('DJANGO_STATIC_ROOT')

DEBUG = os.getenv('DJANGO_DEBUG', '').lower() in ['1', 'true']
COLLECTSTATIC = os.getenv('DJANGO_COLLECTSTATIC', '').lower() in ['1', 'true']

if not DEBUG:
    STATICFILES_STORAGE = \
        'whitenoise.storage.CompressedManifestStaticFilesStorage'

SENTRY_DSN = os.getenv('SENTRY_DSN')
if not COLLECTSTATIC and not DEBUG and SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
        traces_sample_rate=1.0,
        send_default_pii=True
    )

# --- Application Settings --- #

TELEGRAM_API_TOKEN = os.getenv('IMMOBOT_TELEGRAM_API_TOKEN')

SCRAPER_DEBUG = os.getenv('IMMOBOT_SCRAPER_DEBUG')
if SCRAPER_DEBUG is None:
    SCRAPER_DEBUG = DEBUG
else:
    SCRAPER_DEBUG = SCRAPER_DEBUG.lower() in ['1', 'true']

SPLASH_URL = os.getenv('IMMOBOT_SPLASH_URL')

SCRAPE_INTERVAL_SECONDS = os.getenv('IMMOBOT_SCRAPE_INTERVAL_SECONDS')
if not SCRAPE_INTERVAL_SECONDS:
    SCRAPE_INTERVAL_SECONDS = 900
SCRAPE_INTERVAL_SECONDS = int(SCRAPE_INTERVAL_SECONDS)

REQUEST_PAUSE_SECONDS = os.getenv('IMMOBOT_REQUEST_PAUSE_SECONDS')
if not REQUEST_PAUSE_SECONDS:
    REQUEST_PAUSE_SECONDS = 30
REQUEST_PAUSE_SECONDS = int(REQUEST_PAUSE_SECONDS)